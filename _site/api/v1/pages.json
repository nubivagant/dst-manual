{"entries":[{"skip_index":true,"title":"Search results","url":"/search/","tags":[],"body":""},{"title":"Add a new page","url":"/add-a-new-page/","tags":[],"body":"To add new pages, create a Markdown file in the _pages/ directory of the repository. For example, the Markdown text for this page is _pages/new-page.md. The Markdown document begins with this YAML front matter: --- title: Add a new page --- For most pages this will suffice. The URL of the page will match the file path relative to the _pages directory, minus the .md extension. For example, the source for this page appears as _pages/add-a-new-page.md. For the home page of your guide, the front matter should contain a permalink: / entry like this: --- permalink: / title: Introduction (or whatever title you choose) --- You can also explicitly set a permalink: like so: --- permalink: /add-a-new-page/ title: Add a new page --- If you add your own custom permalink:, the '/' at the end of the permalink: attribute is important! It ensures the page is generated as /add-a-new-page/index.html. Without it, the page generates as /add-a-new-page.html. Setting the title in the navigation bar By default, the title appearing in the navigation bar will match the title: specified in the front matter of the page. If you'd like to specify a different name in the navigation bar, you can also set the navtitle: property: --- title: Since brevity is the soul of wit, I'll be brief. navtitle: Polonius's advice --- Link to other pages within the guide Every link to another page must be prefixed with {{ site.baseurl }}. For example, this link to Add images appears in the Markdown source as: [Add images]({{ site.baseurl }}/add-images/). Also, the '/' at the end is important, but for a different reason. If you forget the /, you may get page-not-found errors when following a link locally. This is because the web server built into Jekyll will look for a file named add-images instead of an add-images directory containing an index.html file. Next steps Click the Add images entry in the table of contents to learn how to add images to your guide, or click Make a child page to see how to make chapters appear as children of related chapters."},{"title":"Make a child page","url":"/add-a-new-page/make-a-child-page/","tags":[],"body":"If you want to nest a page under a parent page, first create a subdirectory of _pages that matches the file name of the parent page, minus the .md or other file extension. For example, the directory containing this page is _pages/add-a-new-page. Then follow the instructions to add a new page inside the child directory. Here is the front-matter for this page: --- title: Make a child page --- Or, if the page had set its permalink: explicitly: --- permalink: /add-a-new-page/make-a-child-page/ title: Make a child page --- Note the /parent/child/ format for the permalink. This way, when you're on a parent or child page, the children are visible in the menu. (You'll need to run ./go update_nav before the changes to the menu appear— read more about that in the Update the config file chapter.) Next steps Click the Add images entry in the table of contents to learn how to add images to your guide."},{"title":"Add images","url":"/add-images/","tags":[],"body":"There are two ways to add images. First, if you'd like to keep all your images in a separate directory, create an images/ directory and put your images inside it. Otherwise, you can keep an image in the same directory as the page that references it. You may want to use jpegoptim or optipng to optimize your images. On OS X, both are available via Homebrew. Now within your documents, you can reference your images as outlined below and abiding by the advice in the Accessibility Guide. If an image is in a separate directory: If it's in the same directory as the source document, the link should be relative to the parent directory of the document, specified as ..: Next steps Click the Update the Config File entry in the table of contents."},{"title":"Advanced features","url":"/advanced-features/","tags":[],"body":"These features are not necessary to produce a guide, but are available if you need them. Checking the build log If your site did not rebuild after pushing an update, see the latest build log at https://pages.18f.gov/MY-SITE/build.log, where MY-SITE is the name of your Guide's repository. For example, the latest build log for this site is https://pages.18f.gov/guides-template/build.log. Server-generated defaults The 18F Pages Server will generate an additional configuration file, _config_18f_pages.yml, that will contain the following configuration values: baseurl: This sets {{ site.baseurl }} to the repository name without the organization prefix, e.g. /guides-template for the 18F/guides-template repo, resulting in https://pages.18f.gov/guides-template/. See the Understanding the baseurl: property section for details. asset_root: This sets the location from which the guide will load its CSS and JavaScript assets. Understanding asset_root When developing locally, this value is empty, so your assets are loaded from your local instance. When hosted on https://pages.18f.gov/, this value is set as /guides-template. This allows all pages on the host that use this style template to receive CSS and JavaScript updates automatically whenever https://pages.18f.gov/guides-template is updated. Overriding server-generated defaults If you really want, you can prevent the 18F Pages server from generating its own configuration by adding a _config_18f_pages.yml file to your site. The 18F Pages server will use that file instead of generating its own. Additional scripts and styles If you'd like to add additional scripts or styles to every page on the site, you can add styles: and scripts: lists to _config.yml. To add them to a particular page, add these lists to the page's front matter. Overriding the theme's built-in styles To override the built-in styles, create a new file in assets/css and add it to the scripts: list in _config.yml. However, consider sending a pull request to update the contents of lib/guides_style_18f/sass/ if your changes may be beneficial to all 18F-themed sites. Experimenting with the guides_style_18f gem To try out changes to the common 18F theme, clone the 18F/guides-style repository into the same parent directory as your guide. Then update your Gemfile to point guides_style_18f to this clone: group :jekyll_plugins do gem 'guides_style_18f', path: '../guides-style' end Then run bundle install and ./go serve to begin using the local version of guides_style_18f. Any changes within your guides-style clone will appear in your locally-hosted guide upon reload. Publishing to internal sites There are several 18F Pages hosts that require OAuth2 authentication to access. To publish to one of these hosts, push changes to the following branches: 18f-pages-staging: publishes to https://pages-staging.18f.gov/ 18f-pages-internal: publishes to https://pages-internal.18f.gov/ 18f-pages-dev: publishes to https://pages-dev.18f.gov/ There is one other internal host, https://pages-releases.18f.gov/, which does something special. If you publish to a branch matching the pattern v[0-9]+.[0-9]+.[0-9]*[a-z]+, your site will appear on this host with baseurl set to REPOSITORY/BRANCH. For example, pushing to a branch called v0.9.x within 18F/guides-template would publish https://pages-releases.18f.gov/guides-template/v0.9.x. Publishing to internal and external sites from the same branch By adding an optional _config_internal.yml file to your guide, your site will appear at https://pages-internal.18f.gov/ as well as https://pages.18f.gov. If the contents of this file contain: internal: true then you can ensure that sections formatted with the following markup only appear on pages-internal.18f.gov, and are stripped out of the public-facing pages.18f.gov: {% if site.internal %}TEXT TO BE REDACTED FROM PUBLIC PRODUCTION + STAGING{% endif %} For more details, see the 18f-pages-server README."},{"title":"GitHub setup","url":"/github-setup/","tags":[],"body":"Work your way through these steps to prepare your GitHub repository: Create a new local repository. Set up SSH access to GitHub. Create a new 18F GitHub repository. Create a new local repository Once you've got the _config.yml file up to date, detach your new guide's history from the template's. Do this by replacing the original local Git repository — the one your guide inherited — from the template with a completely new local repository, which won't contain the history from the template and will become the starting point for your new GitHub repository. In the top-level directory, run ./go create_repo to remove all the pages and images that came with this template — make sure you didn't reuse any of the file names from this template! — and create a new Git repository: $ ./go create_repo Clearing Guides Template files. Removing `:create_repo` command from the `./go` script. Removing old git repository. Creating a new git repository. Initialized empty Git repository in .../MY-NEW-GUIDE/.git/ Creating 18f-pages branch. Switched to a new branch '18f-pages' Adding files for initial commit. All done! Run 'git commit' to create your first commit. Then execute git commit -m 'Initial commit' to create your new Guide! (Unless you're Git savvy and would like to tweak things a bit first.) Set up SSH access to GitHub You may want to set up SSH access to GitHub if you haven't already— this way you won't need to enter your password and two-factor authentication code every time you push changes to GitHub. Otherwise, you can use https://github.com/18F/ URLs to access 18F repos. Create a new 18F GitHub repository Now you're ready to create a new 18F GitHub repository. You'll want to set the Public attribute under the Team section and add a fitting Description. Do not select Initialize this repository with a README, Add .gitignore, or Add a license. Instead, update the README.md file in your own, local repository, as necessary. Your local repository also already has .gitignore and LICENSE.md files. After submitting the form to create a new repository, you'll see GitHub's instructions to create a local repository and push your changes up to it. You can ignore these instructions. Instead, do the following, replacing MY-NEW-GUIDE with the name of your guide's repository: # If you have SSH set up: $ git remote add origin git@github.com:18F/MY-NEW-GUIDE.git # Otherwise: $ git remote add origin https://github.com/18F/MY-NEW-GUIDE.git $ git push -u origin 18f-pages Note that you can update the description and add a website link to the repository after creating it: Next steps Once you've finished the steps to create your new guide repo and push it to GitHub, click the Post Your Guide entry in the table of contents for the final steps to publish your guide."},{"title":"Introduction","url":"/","tags":[],"body":"Use this template to create 18F Guides and other 18F-branded documentation available on 18F Pages. It's structured like an 18F Guides guide, and it walks you through the process of creating and publishing an 18F Pages document based on the same theme. The template is derived from CFPB/DOCter. It uses Jekyll as the rendering engine. Create a new guide/document To get started on a new guide (or other document based on this theme), follow the \"Getting started\" instructions in the 18F/guides-template GitHub repository to create a local clone of this template. Once you've created a clone, click the Add a New Page entry in the table of contents to begin the rest of the steps. Update an existing guide/document Note: You need to do this only if your existing guide or document is not already using the guides_style_18f gem or if it does not have an 18f-pages branch. Add the guides_style_18f gem to your guide's Gemfile, if it's not already present. You may also wish to copy the ./go script from the template if your document doesn't already have one. To receive layout updates, as well as any new styles or scripts associated with them, you will need to run ./go update_theme. Or — if you aren't using a ./go script — you can run bundle update --source guides_style_18f manually.) If your repository already has a gh-pages branch, you can create an 18f-pages branch from it by running these commands: $ git checkout -b 18f-pages gh-pages $ git push origin 18f-pages Follow the instructions in Update the Config File to update your _config.yml accordingly. You may also need to consult the GitHub Setup and Post Your Guide chapters to ensure your guide is correctly published to pages.18f.gov and linked from the main 18F Guides site."},{"title":"Post your guide","url":"/post-your-guide/","tags":[],"body":"Work your way through these steps to set up automated publishing to 18F Pages for your new guide: Create the 18f-pages branch. Set the default branch. Create the publishing webhook. Trigger a build. Add the new guide to 18F Guides. Create the 18f-pages branch If you ran the ./go create_repo command from the GitHub setup chapter, you can skip ahead to the Create the publishing webhook section. Otherwise, keep reading. To publish your guide automatically to pages.18f.gov, you'll need to create an 18f-pages branch. You can do this using the GitHub interface by clicking the branch: master button and entering 18f-pages in the Switch branches/tags drop-down box: Set the default branch Note: If your repository is not just a Jekyll site — for example, if it's a project repository with a gh-pages or 18f-pages branch for documentation — you can ignore this step. You also need to set 18f-pages branch as the default. First, click the Settings page button on the right side of the screen: This will present you with the Options page. In the Settings section, select 18f-pages from the Default branch drop-down menu: Deleting the original master branch, both on GitHub and locally, is left as an exercise for the reader. Doing so will help avoid confusion in the long run but isn't strictly necessary. Create the publishing webhook 18F Team members can skip this step! Our pages are now building via an organization-wide GitHub webhook. There is no need to set up a repo-specific webhook anymore. Other users running their own 18F/pages instance: You can either set up a webhook for your organization, or you can add it per-repository as described below. The steps are nearly identical in either case. Go into the Webhooks & Services section of the Settings section and click the Add webhook button. On the following screen, set the Payload URL to https://pages.18f.gov/deploy, leave the Secret field blank, and click Update webhook: Trigger a build With the webhook in place, push any update to your 18f-pages branch to your GitHub repository. Within seconds, your guide should appear at https://pages.18f.gov/MY-NEW-GUIDE. Your guide is now live! Add the new guide to 18F Guides You've reached the final step! Add an entry to the navigation: list of 18F Guides linking to your new guide. You can use this link to edit the file directly in GitHub: Congratulations! Your guide should now be published and accessible to the world as one of the few, the proud, the 18F Guides!"},{"title":"Update the config file","url":"/update-the-config-file/","tags":[],"body":"Work your way through these steps to update the _config.yml file — this configures the 18F style template for your specific guide: Set the guide name. Set the exclude: entries. Register pages in the navigation bar. Update the repository list. Optional: Set the back_link: property. Optional: Update google_analytics_ua:. Set the guide name The name: property appears as the guide's overall title. For example: name: 18F Guides Template Set the exclude: entries Make sure the exclude: list contains at least the following files, and add any other files you might have added that shouldn't appear in the generated _site directory: exclude: - CONTRIBUTING.md - Gemfile - Gemfile.lock - LICENSE.md - README.md - go - vendor Register pages in the navigation bar The navigation: list generates the table of contents. For example, the navigation: section of this guide contains: navigation: - text: Introduction internal: true - text: Add a new page url: add-a-new-page/ internal: true children: - text: Make a child page url: make-a-child-page/ internal: true - text: Add images url: add-images/ internal: true - text: Update the config file url: update-the-config-file/ internal: true children: - text: Understanding the `baseurl:` property url: understanding-baseurl/ internal: true - text: GitHub setup url: github-setup/ internal: true - text: Post your guide url: post-your-guide/ internal: true - text: Advanced features url: advanced-features/ internal: true After you add pages, move pages, or make changes to title: or permalink:, run ./go update_nav from the root directory to produce this list (it will reflect the arrangement and contents of the files in your pages directory). After running the script, you may edit the results by hand to produce the desired ordering of any new pages; the order of existing entries will remain the same. Update the repository list You'll need to update the repos: list to reflect the GitHub repository that will contain your guide. The first of these repositories should be the repository for the guide itself; it will be used to generate the Edit this page and file an issue links in the footer. The url: should be https://github.com/18F/MY-NEW-GUIDE, where MY-NEW-GUIDE is the name you gave your clone of the 18F/guides-template repository. For the description: property, it's OK to enter something generic like \"main repository.\" However, if you aren't certain about either value, it's also OK to enter placeholder text for these properties and change them later, ideally before posting to the 18F Pages server. The repos: entry of this template contains: repos: - name: Guides Template description: Main repository url: https://github.com/18F/guides-template Optional: set the back_link: property The back_link: property produces the Read more 18F Guides link just under the title of the guide at the top of the page. If your document is not actually an 18F Guide, you may change this property to link to 18F Pages— or any other collection of documents to which your new \"guide\" actually belongs. Optional: update google_analytics_ua: The google_analytics_ua: property defaults to the Google Analytics account identifier for all 18F Pages sites. You can override it if you prefer. Next steps Once you're finished updating the config file, click the GitHub Setup entry in the table of contents."},{"title":"Understanding the `baseurl:` property","url":"/update-the-config-file/understanding-baseurl/","tags":[],"body":"It isn't necessary to update baseurl: yourself in most cases. This section is not necessary to follow through with the reset of the instructions. The baseurl: configuration property affects the root URL of your guide when served locally on your machine. When published on 18F Pages, the baseurl: automatically sets to the name of your repository, so you don't have to do that yourself. For example, when run locally, the URL for this guide is http://localhost:4000/. In production, the URL is https://pages.18f.gov/guides-template/. The URLs of the individual section pages are relative to the baseurl:. For example, the permalink: of this page is /update-the-config-file/understanding-baseurl/. The full local URL is http://localhost:4000/update-the-config-file/understanding-baseurl/, and in production it's https://pages.18f.gov/guides-template/update-the-config-file/understanding-baseurl/. Change the baseurl: when serving locally If you do change the baseurl: property in the _config.yml file, remember to include the trailing '/' when serving locally. The Jekyll built-in webserver doesn't redirect to it automatically."}]}